
RTOS_Projects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000274c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080028dc  080028dc  000128dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002914  08002914  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002914  08002914  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002914  08002914  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002914  08002914  00012914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002918  08002918  00012918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800291c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000104  20000104  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bfb3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bb7  00000000  00000000  0002bfef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  0002dba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ae0  00000000  00000000  0002e760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001efc6  00000000  00000000  0002f240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cff7  00000000  00000000  0004e206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4b58  00000000  00000000  0005b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011fd55  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000304c  00000000  00000000  0011fda8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080028c4 	.word	0x080028c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	080028c4 	.word	0x080028c4

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 f9ae 	bl	8000534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f803 	bl	80001e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f842 	bl	8000264 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e0:	e7fe      	b.n	80001e0 <main+0x10>

080001e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e2:	b580      	push	{r7, lr}
 80001e4:	b090      	sub	sp, #64	; 0x40
 80001e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e8:	f107 0318 	add.w	r3, r7, #24
 80001ec:	2228      	movs	r2, #40	; 0x28
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f002 fb5f 	bl	80028b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
 8000202:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000204:	2302      	movs	r3, #2
 8000206:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000208:	2301      	movs	r3, #1
 800020a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020c:	2310      	movs	r3, #16
 800020e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000210:	2302      	movs	r3, #2
 8000212:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000214:	2300      	movs	r3, #0
 8000216:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000218:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800021c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	4618      	mov	r0, r3
 8000224:	f000 fc28 	bl	8000a78 <HAL_RCC_OscConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800022e:	f000 f8a3 	bl	8000378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000232:	230f      	movs	r3, #15
 8000234:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000236:	2302      	movs	r3, #2
 8000238:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000242:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2102      	movs	r1, #2
 800024c:	4618      	mov	r0, r3
 800024e:	f001 fc51 	bl	8001af4 <HAL_RCC_ClockConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000258:	f000 f88e 	bl	8000378 <Error_Handler>
  }
}
 800025c:	bf00      	nop
 800025e:	3740      	adds	r7, #64	; 0x40
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}

08000264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b08a      	sub	sp, #40	; 0x28
 8000268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026a:	f107 0314 	add.w	r3, r7, #20
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800027a:	4b34      	ldr	r3, [pc, #208]	; (800034c <MX_GPIO_Init+0xe8>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	4a33      	ldr	r2, [pc, #204]	; (800034c <MX_GPIO_Init+0xe8>)
 8000280:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000284:	6153      	str	r3, [r2, #20]
 8000286:	4b31      	ldr	r3, [pc, #196]	; (800034c <MX_GPIO_Init+0xe8>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800028e:	613b      	str	r3, [r7, #16]
 8000290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000292:	4b2e      	ldr	r3, [pc, #184]	; (800034c <MX_GPIO_Init+0xe8>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	4a2d      	ldr	r2, [pc, #180]	; (800034c <MX_GPIO_Init+0xe8>)
 8000298:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800029c:	6153      	str	r3, [r2, #20]
 800029e:	4b2b      	ldr	r3, [pc, #172]	; (800034c <MX_GPIO_Init+0xe8>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002aa:	4b28      	ldr	r3, [pc, #160]	; (800034c <MX_GPIO_Init+0xe8>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	4a27      	ldr	r2, [pc, #156]	; (800034c <MX_GPIO_Init+0xe8>)
 80002b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002b4:	6153      	str	r3, [r2, #20]
 80002b6:	4b25      	ldr	r3, [pc, #148]	; (800034c <MX_GPIO_Init+0xe8>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002be:	60bb      	str	r3, [r7, #8]
 80002c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c2:	4b22      	ldr	r3, [pc, #136]	; (800034c <MX_GPIO_Init+0xe8>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	4a21      	ldr	r2, [pc, #132]	; (800034c <MX_GPIO_Init+0xe8>)
 80002c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002cc:	6153      	str	r3, [r2, #20]
 80002ce:	4b1f      	ldr	r3, [pc, #124]	; (800034c <MX_GPIO_Init+0xe8>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002d6:	607b      	str	r3, [r7, #4]
 80002d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2120      	movs	r1, #32
 80002de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e2:	f000 fbb1 	bl	8000a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80002f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f2:	2300      	movs	r3, #0
 80002f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002f6:	f107 0314 	add.w	r3, r7, #20
 80002fa:	4619      	mov	r1, r3
 80002fc:	4814      	ldr	r0, [pc, #80]	; (8000350 <MX_GPIO_Init+0xec>)
 80002fe:	f000 fa31 	bl	8000764 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000302:	230c      	movs	r3, #12
 8000304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000306:	2302      	movs	r3, #2
 8000308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030a:	2300      	movs	r3, #0
 800030c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800030e:	2303      	movs	r3, #3
 8000310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000312:	2307      	movs	r3, #7
 8000314:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000316:	f107 0314 	add.w	r3, r7, #20
 800031a:	4619      	mov	r1, r3
 800031c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000320:	f000 fa20 	bl	8000764 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000324:	2320      	movs	r3, #32
 8000326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000328:	2301      	movs	r3, #1
 800032a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032c:	2300      	movs	r3, #0
 800032e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000330:	2300      	movs	r3, #0
 8000332:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000334:	f107 0314 	add.w	r3, r7, #20
 8000338:	4619      	mov	r1, r3
 800033a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033e:	f000 fa11 	bl	8000764 <HAL_GPIO_Init>

}
 8000342:	bf00      	nop
 8000344:	3728      	adds	r7, #40	; 0x28
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40021000 	.word	0x40021000
 8000350:	48000800 	.word	0x48000800

08000354 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a04      	ldr	r2, [pc, #16]	; (8000374 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d101      	bne.n	800036a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000366:	f000 f8fb 	bl	8000560 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40001000 	.word	0x40001000

08000378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800037c:	b672      	cpsid	i
}
 800037e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000380:	e7fe      	b.n	8000380 <Error_Handler+0x8>
	...

08000384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800038a:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <HAL_MspInit+0x44>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <HAL_MspInit+0x44>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6193      	str	r3, [r2, #24]
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <HAL_MspInit+0x44>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <HAL_MspInit+0x44>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	4a08      	ldr	r2, [pc, #32]	; (80003c8 <HAL_MspInit+0x44>)
 80003a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ac:	61d3      	str	r3, [r2, #28]
 80003ae:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <HAL_MspInit+0x44>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000

080003cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b08c      	sub	sp, #48	; 0x30
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority ,0);
 80003dc:	2200      	movs	r2, #0
 80003de:	6879      	ldr	r1, [r7, #4]
 80003e0:	2036      	movs	r0, #54	; 0x36
 80003e2:	f000 f995 	bl	8000710 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80003e6:	2036      	movs	r0, #54	; 0x36
 80003e8:	f000 f9ae 	bl	8000748 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80003ec:	4b1f      	ldr	r3, [pc, #124]	; (800046c <HAL_InitTick+0xa0>)
 80003ee:	69db      	ldr	r3, [r3, #28]
 80003f0:	4a1e      	ldr	r2, [pc, #120]	; (800046c <HAL_InitTick+0xa0>)
 80003f2:	f043 0310 	orr.w	r3, r3, #16
 80003f6:	61d3      	str	r3, [r2, #28]
 80003f8:	4b1c      	ldr	r3, [pc, #112]	; (800046c <HAL_InitTick+0xa0>)
 80003fa:	69db      	ldr	r3, [r3, #28]
 80003fc:	f003 0310 	and.w	r3, r3, #16
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000404:	f107 0210 	add.w	r2, r7, #16
 8000408:	f107 0314 	add.w	r3, r7, #20
 800040c:	4611      	mov	r1, r2
 800040e:	4618      	mov	r0, r3
 8000410:	f001 fd84 	bl	8001f1c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000414:	f001 fd60 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8000418:	4603      	mov	r3, r0
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800041e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000420:	4a13      	ldr	r2, [pc, #76]	; (8000470 <HAL_InitTick+0xa4>)
 8000422:	fba2 2303 	umull	r2, r3, r2, r3
 8000426:	0c9b      	lsrs	r3, r3, #18
 8000428:	3b01      	subs	r3, #1
 800042a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <HAL_InitTick+0xa8>)
 800042e:	4a12      	ldr	r2, [pc, #72]	; (8000478 <HAL_InitTick+0xac>)
 8000430:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000432:	4b10      	ldr	r3, [pc, #64]	; (8000474 <HAL_InitTick+0xa8>)
 8000434:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000438:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800043a:	4a0e      	ldr	r2, [pc, #56]	; (8000474 <HAL_InitTick+0xa8>)
 800043c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800043e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <HAL_InitTick+0xa8>)
 8000442:	2200      	movs	r2, #0
 8000444:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <HAL_InitTick+0xa8>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800044c:	4809      	ldr	r0, [pc, #36]	; (8000474 <HAL_InitTick+0xa8>)
 800044e:	f001 fd97 	bl	8001f80 <HAL_TIM_Base_Init>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d104      	bne.n	8000462 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000458:	4806      	ldr	r0, [pc, #24]	; (8000474 <HAL_InitTick+0xa8>)
 800045a:	f001 fdf3 	bl	8002044 <HAL_TIM_Base_Start_IT>
 800045e:	4603      	mov	r3, r0
 8000460:	e000      	b.n	8000464 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000462:	2301      	movs	r3, #1
}
 8000464:	4618      	mov	r0, r3
 8000466:	3730      	adds	r7, #48	; 0x30
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40021000 	.word	0x40021000
 8000470:	431bde83 	.word	0x431bde83
 8000474:	20000028 	.word	0x20000028
 8000478:	40001000 	.word	0x40001000

0800047c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <NMI_Handler+0x4>

08000482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000486:	e7fe      	b.n	8000486 <HardFault_Handler+0x4>

08000488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800048c:	e7fe      	b.n	800048c <MemManage_Handler+0x4>

0800048e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <BusFault_Handler+0x4>

08000494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <UsageFault_Handler+0x4>

0800049a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80004ac:	4802      	ldr	r0, [pc, #8]	; (80004b8 <TIM6_DAC1_IRQHandler+0x10>)
 80004ae:	f001 fe25 	bl	80020fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000028 	.word	0x20000028

080004bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <SystemInit+0x20>)
 80004c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004c6:	4a05      	ldr	r2, [pc, #20]	; (80004dc <SystemInit+0x20>)
 80004c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	e000ed00 	.word	0xe000ed00

080004e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000518 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e4:	480d      	ldr	r0, [pc, #52]	; (800051c <LoopForever+0x6>)
  ldr r1, =_edata
 80004e6:	490e      	ldr	r1, [pc, #56]	; (8000520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e8:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <LoopForever+0xe>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004fc:	4c0b      	ldr	r4, [pc, #44]	; (800052c <LoopForever+0x16>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800050a:	f7ff ffd7 	bl	80004bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050e:	f002 f9ad 	bl	800286c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000512:	f7ff fe5d 	bl	80001d0 <main>

08000516 <LoopForever>:

LoopForever:
    b LoopForever
 8000516:	e7fe      	b.n	8000516 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000518:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000520:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000524:	0800291c 	.word	0x0800291c
  ldr r2, =_sbss
 8000528:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800052c:	20000104 	.word	0x20000104

08000530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC1_2_IRQHandler>
	...

08000534 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <HAL_Init+0x28>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a07      	ldr	r2, [pc, #28]	; (800055c <HAL_Init+0x28>)
 800053e:	f043 0310 	orr.w	r3, r3, #16
 8000542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f8d8 	bl	80006fa <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800054a:	2000      	movs	r0, #0
 800054c:	f7ff ff3e 	bl	80003cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000550:	f7ff ff18 	bl	8000384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000554:	2300      	movs	r3, #0
}
 8000556:	4618      	mov	r0, r3
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40022000 	.word	0x40022000

08000560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <HAL_IncTick+0x20>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	461a      	mov	r2, r3
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <HAL_IncTick+0x24>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4413      	add	r3, r2
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <HAL_IncTick+0x24>)
 8000572:	6013      	str	r3, [r2, #0]
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20000008 	.word	0x20000008
 8000584:	20000074 	.word	0x20000074

08000588 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  return uwTick;  
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <HAL_GetTick+0x14>)
 800058e:	681b      	ldr	r3, [r3, #0]
}
 8000590:	4618      	mov	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000074 	.word	0x20000074

080005a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f003 0307 	and.w	r3, r3, #7
 80005ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <__NVIC_SetPriorityGrouping+0x44>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b6:	68ba      	ldr	r2, [r7, #8]
 80005b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005bc:	4013      	ands	r3, r2
 80005be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005d2:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <__NVIC_SetPriorityGrouping+0x44>)
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	60d3      	str	r3, [r2, #12]
}
 80005d8:	bf00      	nop
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <__NVIC_GetPriorityGrouping+0x18>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	0a1b      	lsrs	r3, r3, #8
 80005f2:	f003 0307 	and.w	r3, r3, #7
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	2b00      	cmp	r3, #0
 8000614:	db0b      	blt.n	800062e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	f003 021f 	and.w	r2, r3, #31
 800061c:	4907      	ldr	r1, [pc, #28]	; (800063c <__NVIC_EnableIRQ+0x38>)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	095b      	lsrs	r3, r3, #5
 8000624:	2001      	movs	r0, #1
 8000626:	fa00 f202 	lsl.w	r2, r0, r2
 800062a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000e100 	.word	0xe000e100

08000640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000650:	2b00      	cmp	r3, #0
 8000652:	db0a      	blt.n	800066a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	b2da      	uxtb	r2, r3
 8000658:	490c      	ldr	r1, [pc, #48]	; (800068c <__NVIC_SetPriority+0x4c>)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	0112      	lsls	r2, r2, #4
 8000660:	b2d2      	uxtb	r2, r2
 8000662:	440b      	add	r3, r1
 8000664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000668:	e00a      	b.n	8000680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4908      	ldr	r1, [pc, #32]	; (8000690 <__NVIC_SetPriority+0x50>)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	f003 030f 	and.w	r3, r3, #15
 8000676:	3b04      	subs	r3, #4
 8000678:	0112      	lsls	r2, r2, #4
 800067a:	b2d2      	uxtb	r2, r2
 800067c:	440b      	add	r3, r1
 800067e:	761a      	strb	r2, [r3, #24]
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000e100 	.word	0xe000e100
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000694:	b480      	push	{r7}
 8000696:	b089      	sub	sp, #36	; 0x24
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	f1c3 0307 	rsb	r3, r3, #7
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	bf28      	it	cs
 80006b2:	2304      	movcs	r3, #4
 80006b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	3304      	adds	r3, #4
 80006ba:	2b06      	cmp	r3, #6
 80006bc:	d902      	bls.n	80006c4 <NVIC_EncodePriority+0x30>
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3b03      	subs	r3, #3
 80006c2:	e000      	b.n	80006c6 <NVIC_EncodePriority+0x32>
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	f04f 32ff 	mov.w	r2, #4294967295
 80006cc:	69bb      	ldr	r3, [r7, #24]
 80006ce:	fa02 f303 	lsl.w	r3, r2, r3
 80006d2:	43da      	mvns	r2, r3
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	401a      	ands	r2, r3
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006dc:	f04f 31ff 	mov.w	r1, #4294967295
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	fa01 f303 	lsl.w	r3, r1, r3
 80006e6:	43d9      	mvns	r1, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	4313      	orrs	r3, r2
         );
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3724      	adds	r7, #36	; 0x24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff ff4c 	bl	80005a0 <__NVIC_SetPriorityGrouping>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
 800071c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000722:	f7ff ff61 	bl	80005e8 <__NVIC_GetPriorityGrouping>
 8000726:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	68b9      	ldr	r1, [r7, #8]
 800072c:	6978      	ldr	r0, [r7, #20]
 800072e:	f7ff ffb1 	bl	8000694 <NVIC_EncodePriority>
 8000732:	4602      	mov	r2, r0
 8000734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff80 	bl	8000640 <__NVIC_SetPriority>
}
 8000740:	bf00      	nop
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff54 	bl	8000604 <__NVIC_EnableIRQ>
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000764:	b480      	push	{r7}
 8000766:	b087      	sub	sp, #28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000772:	e14e      	b.n	8000a12 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	2101      	movs	r1, #1
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	fa01 f303 	lsl.w	r3, r1, r3
 8000780:	4013      	ands	r3, r2
 8000782:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	2b00      	cmp	r3, #0
 8000788:	f000 8140 	beq.w	8000a0c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	f003 0303 	and.w	r3, r3, #3
 8000794:	2b01      	cmp	r3, #1
 8000796:	d005      	beq.n	80007a4 <HAL_GPIO_Init+0x40>
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	f003 0303 	and.w	r3, r3, #3
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d130      	bne.n	8000806 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	2203      	movs	r2, #3
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	43db      	mvns	r3, r3
 80007b6:	693a      	ldr	r2, [r7, #16]
 80007b8:	4013      	ands	r3, r2
 80007ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	68da      	ldr	r2, [r3, #12]
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	693a      	ldr	r2, [r7, #16]
 80007d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007da:	2201      	movs	r2, #1
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43db      	mvns	r3, r3
 80007e4:	693a      	ldr	r2, [r7, #16]
 80007e6:	4013      	ands	r3, r2
 80007e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	091b      	lsrs	r3, r3, #4
 80007f0:	f003 0201 	and.w	r2, r3, #1
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	693a      	ldr	r2, [r7, #16]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	f003 0303 	and.w	r3, r3, #3
 800080e:	2b03      	cmp	r3, #3
 8000810:	d017      	beq.n	8000842 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	2203      	movs	r2, #3
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	43db      	mvns	r3, r3
 8000824:	693a      	ldr	r2, [r7, #16]
 8000826:	4013      	ands	r3, r2
 8000828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	689a      	ldr	r2, [r3, #8]
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	693a      	ldr	r2, [r7, #16]
 8000838:	4313      	orrs	r3, r2
 800083a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	f003 0303 	and.w	r3, r3, #3
 800084a:	2b02      	cmp	r3, #2
 800084c:	d123      	bne.n	8000896 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	08da      	lsrs	r2, r3, #3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3208      	adds	r2, #8
 8000856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800085a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	220f      	movs	r2, #15
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43db      	mvns	r3, r3
 800086c:	693a      	ldr	r2, [r7, #16]
 800086e:	4013      	ands	r3, r2
 8000870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	691a      	ldr	r2, [r3, #16]
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	f003 0307 	and.w	r3, r3, #7
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	4313      	orrs	r3, r2
 8000886:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	08da      	lsrs	r2, r3, #3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3208      	adds	r2, #8
 8000890:	6939      	ldr	r1, [r7, #16]
 8000892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	2203      	movs	r2, #3
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43db      	mvns	r3, r3
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	4013      	ands	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	f003 0203 	and.w	r2, r3, #3
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	f000 809a 	beq.w	8000a0c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d8:	4b55      	ldr	r3, [pc, #340]	; (8000a30 <HAL_GPIO_Init+0x2cc>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a54      	ldr	r2, [pc, #336]	; (8000a30 <HAL_GPIO_Init+0x2cc>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b52      	ldr	r3, [pc, #328]	; (8000a30 <HAL_GPIO_Init+0x2cc>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80008f0:	4a50      	ldr	r2, [pc, #320]	; (8000a34 <HAL_GPIO_Init+0x2d0>)
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	089b      	lsrs	r3, r3, #2
 80008f6:	3302      	adds	r3, #2
 80008f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	f003 0303 	and.w	r3, r3, #3
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	220f      	movs	r2, #15
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	4013      	ands	r3, r2
 8000912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800091a:	d013      	beq.n	8000944 <HAL_GPIO_Init+0x1e0>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a46      	ldr	r2, [pc, #280]	; (8000a38 <HAL_GPIO_Init+0x2d4>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d00d      	beq.n	8000940 <HAL_GPIO_Init+0x1dc>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a45      	ldr	r2, [pc, #276]	; (8000a3c <HAL_GPIO_Init+0x2d8>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d007      	beq.n	800093c <HAL_GPIO_Init+0x1d8>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a44      	ldr	r2, [pc, #272]	; (8000a40 <HAL_GPIO_Init+0x2dc>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d101      	bne.n	8000938 <HAL_GPIO_Init+0x1d4>
 8000934:	2303      	movs	r3, #3
 8000936:	e006      	b.n	8000946 <HAL_GPIO_Init+0x1e2>
 8000938:	2305      	movs	r3, #5
 800093a:	e004      	b.n	8000946 <HAL_GPIO_Init+0x1e2>
 800093c:	2302      	movs	r3, #2
 800093e:	e002      	b.n	8000946 <HAL_GPIO_Init+0x1e2>
 8000940:	2301      	movs	r3, #1
 8000942:	e000      	b.n	8000946 <HAL_GPIO_Init+0x1e2>
 8000944:	2300      	movs	r3, #0
 8000946:	697a      	ldr	r2, [r7, #20]
 8000948:	f002 0203 	and.w	r2, r2, #3
 800094c:	0092      	lsls	r2, r2, #2
 800094e:	4093      	lsls	r3, r2
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4313      	orrs	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000956:	4937      	ldr	r1, [pc, #220]	; (8000a34 <HAL_GPIO_Init+0x2d0>)
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	089b      	lsrs	r3, r3, #2
 800095c:	3302      	adds	r3, #2
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000964:	4b37      	ldr	r3, [pc, #220]	; (8000a44 <HAL_GPIO_Init+0x2e0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	43db      	mvns	r3, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4013      	ands	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800097c:	2b00      	cmp	r3, #0
 800097e:	d003      	beq.n	8000988 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000988:	4a2e      	ldr	r2, [pc, #184]	; (8000a44 <HAL_GPIO_Init+0x2e0>)
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800098e:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <HAL_GPIO_Init+0x2e0>)
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	43db      	mvns	r3, r3
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4013      	ands	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d003      	beq.n	80009b2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80009b2:	4a24      	ldr	r2, [pc, #144]	; (8000a44 <HAL_GPIO_Init+0x2e0>)
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009b8:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <HAL_GPIO_Init+0x2e0>)
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	43db      	mvns	r3, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d003      	beq.n	80009dc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80009dc:	4a19      	ldr	r2, [pc, #100]	; (8000a44 <HAL_GPIO_Init+0x2e0>)
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <HAL_GPIO_Init+0x2e0>)
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	43db      	mvns	r3, r3
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4013      	ands	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a06:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <HAL_GPIO_Init+0x2e0>)
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	fa22 f303 	lsr.w	r3, r2, r3
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	f47f aea9 	bne.w	8000774 <HAL_GPIO_Init+0x10>
  }
}
 8000a22:	bf00      	nop
 8000a24:	bf00      	nop
 8000a26:	371c      	adds	r7, #28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40010000 	.word	0x40010000
 8000a38:	48000400 	.word	0x48000400
 8000a3c:	48000800 	.word	0x48000800
 8000a40:	48000c00 	.word	0x48000c00
 8000a44:	40010400 	.word	0x40010400

08000a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	807b      	strh	r3, [r7, #2]
 8000a54:	4613      	mov	r3, r2
 8000a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a58:	787b      	ldrb	r3, [r7, #1]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d003      	beq.n	8000a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a5e:	887a      	ldrh	r2, [r7, #2]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a64:	e002      	b.n	8000a6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a66:	887a      	ldrh	r2, [r7, #2]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000a84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000a88:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000a8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	f001 b823 	b.w	8001ae4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000aa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	f000 817d 	beq.w	8000dae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ab4:	4bbc      	ldr	r3, [pc, #752]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f003 030c 	and.w	r3, r3, #12
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	d00c      	beq.n	8000ada <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ac0:	4bb9      	ldr	r3, [pc, #740]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f003 030c 	and.w	r3, r3, #12
 8000ac8:	2b08      	cmp	r3, #8
 8000aca:	d15c      	bne.n	8000b86 <HAL_RCC_OscConfig+0x10e>
 8000acc:	4bb6      	ldr	r3, [pc, #728]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ad8:	d155      	bne.n	8000b86 <HAL_RCC_OscConfig+0x10e>
 8000ada:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ade:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ae2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000ae6:	fa93 f3a3 	rbit	r3, r3
 8000aea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000aee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000af2:	fab3 f383 	clz	r3, r3
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	095b      	lsrs	r3, r3, #5
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d102      	bne.n	8000b0c <HAL_RCC_OscConfig+0x94>
 8000b06:	4ba8      	ldr	r3, [pc, #672]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	e015      	b.n	8000b38 <HAL_RCC_OscConfig+0xc0>
 8000b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b10:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b14:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000b18:	fa93 f3a3 	rbit	r3, r3
 8000b1c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b24:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000b28:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000b2c:	fa93 f3a3 	rbit	r3, r3
 8000b30:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000b34:	4b9c      	ldr	r3, [pc, #624]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b3c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000b40:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000b44:	fa92 f2a2 	rbit	r2, r2
 8000b48:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000b4c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	f042 0220 	orr.w	r2, r2, #32
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	f002 021f 	and.w	r2, r2, #31
 8000b60:	2101      	movs	r1, #1
 8000b62:	fa01 f202 	lsl.w	r2, r1, r2
 8000b66:	4013      	ands	r3, r2
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f000 811f 	beq.w	8000dac <HAL_RCC_OscConfig+0x334>
 8000b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8116 	bne.w	8000dac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	f000 bfaf 	b.w	8001ae4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b96:	d106      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x12e>
 8000b98:	4b83      	ldr	r3, [pc, #524]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a82      	ldr	r2, [pc, #520]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	e036      	b.n	8000c14 <HAL_RCC_OscConfig+0x19c>
 8000ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000baa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10c      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x158>
 8000bb6:	4b7c      	ldr	r3, [pc, #496]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a7b      	ldr	r2, [pc, #492]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	4b79      	ldr	r3, [pc, #484]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a78      	ldr	r2, [pc, #480]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000bc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	e021      	b.n	8000c14 <HAL_RCC_OscConfig+0x19c>
 8000bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000bd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000be0:	d10c      	bne.n	8000bfc <HAL_RCC_OscConfig+0x184>
 8000be2:	4b71      	ldr	r3, [pc, #452]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a70      	ldr	r2, [pc, #448]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	4b6e      	ldr	r3, [pc, #440]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a6d      	ldr	r2, [pc, #436]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	e00b      	b.n	8000c14 <HAL_RCC_OscConfig+0x19c>
 8000bfc:	4b6a      	ldr	r3, [pc, #424]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a69      	ldr	r2, [pc, #420]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b67      	ldr	r3, [pc, #412]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a66      	ldr	r2, [pc, #408]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c12:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c14:	4b64      	ldr	r3, [pc, #400]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c18:	f023 020f 	bic.w	r2, r3, #15
 8000c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	495f      	ldr	r1, [pc, #380]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d059      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c3e:	f7ff fca3 	bl	8000588 <HAL_GetTick>
 8000c42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c46:	e00a      	b.n	8000c5e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c48:	f7ff fc9e 	bl	8000588 <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	2b64      	cmp	r3, #100	; 0x64
 8000c56:	d902      	bls.n	8000c5e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	f000 bf43 	b.w	8001ae4 <HAL_RCC_OscConfig+0x106c>
 8000c5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c62:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c66:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000c6a:	fa93 f3a3 	rbit	r3, r3
 8000c6e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000c72:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c76:	fab3 f383 	clz	r3, r3
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	095b      	lsrs	r3, r3, #5
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d102      	bne.n	8000c90 <HAL_RCC_OscConfig+0x218>
 8000c8a:	4b47      	ldr	r3, [pc, #284]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	e015      	b.n	8000cbc <HAL_RCC_OscConfig+0x244>
 8000c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c94:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c98:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000c9c:	fa93 f3a3 	rbit	r3, r3
 8000ca0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ca4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ca8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000cac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000cb0:	fa93 f3a3 	rbit	r3, r3
 8000cb4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000cb8:	4b3b      	ldr	r3, [pc, #236]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cc0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000cc4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000cc8:	fa92 f2a2 	rbit	r2, r2
 8000ccc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000cd0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	f042 0220 	orr.w	r2, r2, #32
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	f002 021f 	and.w	r2, r2, #31
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cea:	4013      	ands	r3, r2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d0ab      	beq.n	8000c48 <HAL_RCC_OscConfig+0x1d0>
 8000cf0:	e05d      	b.n	8000dae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf2:	f7ff fc49 	bl	8000588 <HAL_GetTick>
 8000cf6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cfa:	e00a      	b.n	8000d12 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cfc:	f7ff fc44 	bl	8000588 <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2b64      	cmp	r3, #100	; 0x64
 8000d0a:	d902      	bls.n	8000d12 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	f000 bee9 	b.w	8001ae4 <HAL_RCC_OscConfig+0x106c>
 8000d12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d16:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000d1e:	fa93 f3a3 	rbit	r3, r3
 8000d22:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000d26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d2a:	fab3 f383 	clz	r3, r3
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	095b      	lsrs	r3, r3, #5
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d102      	bne.n	8000d44 <HAL_RCC_OscConfig+0x2cc>
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	e015      	b.n	8000d70 <HAL_RCC_OscConfig+0x2f8>
 8000d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d48:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000d50:	fa93 f3a3 	rbit	r3, r3
 8000d54:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d5c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000d60:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000d64:	fa93 f3a3 	rbit	r3, r3
 8000d68:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_RCC_OscConfig+0x330>)
 8000d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d74:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000d78:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000d7c:	fa92 f2a2 	rbit	r2, r2
 8000d80:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000d84:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	f042 0220 	orr.w	r2, r2, #32
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	f002 021f 	and.w	r2, r2, #31
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9e:	4013      	ands	r3, r2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1ab      	bne.n	8000cfc <HAL_RCC_OscConfig+0x284>
 8000da4:	e003      	b.n	8000dae <HAL_RCC_OscConfig+0x336>
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000db2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 817d 	beq.w	80010be <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000dc4:	4ba6      	ldr	r3, [pc, #664]	; (8001060 <HAL_RCC_OscConfig+0x5e8>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 030c 	and.w	r3, r3, #12
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d00b      	beq.n	8000de8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000dd0:	4ba3      	ldr	r3, [pc, #652]	; (8001060 <HAL_RCC_OscConfig+0x5e8>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 030c 	and.w	r3, r3, #12
 8000dd8:	2b08      	cmp	r3, #8
 8000dda:	d172      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x44a>
 8000ddc:	4ba0      	ldr	r3, [pc, #640]	; (8001060 <HAL_RCC_OscConfig+0x5e8>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d16c      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x44a>
 8000de8:	2302      	movs	r3, #2
 8000dea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000df2:	fa93 f3a3 	rbit	r3, r3
 8000df6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000dfa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dfe:	fab3 f383 	clz	r3, r3
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	095b      	lsrs	r3, r3, #5
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d102      	bne.n	8000e18 <HAL_RCC_OscConfig+0x3a0>
 8000e12:	4b93      	ldr	r3, [pc, #588]	; (8001060 <HAL_RCC_OscConfig+0x5e8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	e013      	b.n	8000e40 <HAL_RCC_OscConfig+0x3c8>
 8000e18:	2302      	movs	r3, #2
 8000e1a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000e22:	fa93 f3a3 	rbit	r3, r3
 8000e26:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000e30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000e34:	fa93 f3a3 	rbit	r3, r3
 8000e38:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000e3c:	4b88      	ldr	r3, [pc, #544]	; (8001060 <HAL_RCC_OscConfig+0x5e8>)
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	2202      	movs	r2, #2
 8000e42:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000e46:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000e4a:	fa92 f2a2 	rbit	r2, r2
 8000e4e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000e52:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000e56:	fab2 f282 	clz	r2, r2
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	f042 0220 	orr.w	r2, r2, #32
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	f002 021f 	and.w	r2, r2, #31
 8000e66:	2101      	movs	r1, #1
 8000e68:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d00a      	beq.n	8000e88 <HAL_RCC_OscConfig+0x410>
 8000e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d002      	beq.n	8000e88 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	f000 be2e 	b.w	8001ae4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e88:	4b75      	ldr	r3, [pc, #468]	; (8001060 <HAL_RCC_OscConfig+0x5e8>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	21f8      	movs	r1, #248	; 0xf8
 8000e9e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000ea6:	fa91 f1a1 	rbit	r1, r1
 8000eaa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000eae:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000eb2:	fab1 f181 	clz	r1, r1
 8000eb6:	b2c9      	uxtb	r1, r1
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	4969      	ldr	r1, [pc, #420]	; (8001060 <HAL_RCC_OscConfig+0x5e8>)
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ec0:	e0fd      	b.n	80010be <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f000 8088 	beq.w	8000fe4 <HAL_RCC_OscConfig+0x56c>
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eda:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000ede:	fa93 f3a3 	rbit	r3, r3
 8000ee2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000ee6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eea:	fab3 f383 	clz	r3, r3
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ef4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	461a      	mov	r2, r3
 8000efc:	2301      	movs	r3, #1
 8000efe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f00:	f7ff fb42 	bl	8000588 <HAL_GetTick>
 8000f04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f08:	e00a      	b.n	8000f20 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f0a:	f7ff fb3d 	bl	8000588 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d902      	bls.n	8000f20 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	f000 bde2 	b.w	8001ae4 <HAL_RCC_OscConfig+0x106c>
 8000f20:	2302      	movs	r3, #2
 8000f22:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f26:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f2a:	fa93 f3a3 	rbit	r3, r3
 8000f2e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000f32:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f36:	fab3 f383 	clz	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	095b      	lsrs	r3, r3, #5
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d102      	bne.n	8000f50 <HAL_RCC_OscConfig+0x4d8>
 8000f4a:	4b45      	ldr	r3, [pc, #276]	; (8001060 <HAL_RCC_OscConfig+0x5e8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	e013      	b.n	8000f78 <HAL_RCC_OscConfig+0x500>
 8000f50:	2302      	movs	r3, #2
 8000f52:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000f5a:	fa93 f3a3 	rbit	r3, r3
 8000f5e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000f62:	2302      	movs	r3, #2
 8000f64:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000f68:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000f6c:	fa93 f3a3 	rbit	r3, r3
 8000f70:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000f74:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <HAL_RCC_OscConfig+0x5e8>)
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	2202      	movs	r2, #2
 8000f7a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000f7e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000f82:	fa92 f2a2 	rbit	r2, r2
 8000f86:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8000f8a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000f8e:	fab2 f282 	clz	r2, r2
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	f042 0220 	orr.w	r2, r2, #32
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	f002 021f 	and.w	r2, r2, #31
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0af      	beq.n	8000f0a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000faa:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <HAL_RCC_OscConfig+0x5e8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	21f8      	movs	r1, #248	; 0xf8
 8000fc0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000fc8:	fa91 f1a1 	rbit	r1, r1
 8000fcc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8000fd0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000fd4:	fab1 f181 	clz	r1, r1
 8000fd8:	b2c9      	uxtb	r1, r1
 8000fda:	408b      	lsls	r3, r1
 8000fdc:	4920      	ldr	r1, [pc, #128]	; (8001060 <HAL_RCC_OscConfig+0x5e8>)
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	600b      	str	r3, [r1, #0]
 8000fe2:	e06c      	b.n	80010be <HAL_RCC_OscConfig+0x646>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000fee:	fa93 f3a3 	rbit	r3, r3
 8000ff2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8000ff6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ffa:	fab3 f383 	clz	r3, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001004:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	461a      	mov	r2, r3
 800100c:	2300      	movs	r3, #0
 800100e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff faba 	bl	8000588 <HAL_GetTick>
 8001014:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001018:	e00a      	b.n	8001030 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800101a:	f7ff fab5 	bl	8000588 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d902      	bls.n	8001030 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	f000 bd5a 	b.w	8001ae4 <HAL_RCC_OscConfig+0x106c>
 8001030:	2302      	movs	r3, #2
 8001032:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001036:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800103a:	fa93 f3a3 	rbit	r3, r3
 800103e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001046:	fab3 f383 	clz	r3, r3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	095b      	lsrs	r3, r3, #5
 800104e:	b2db      	uxtb	r3, r3
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b01      	cmp	r3, #1
 8001058:	d104      	bne.n	8001064 <HAL_RCC_OscConfig+0x5ec>
 800105a:	4b01      	ldr	r3, [pc, #4]	; (8001060 <HAL_RCC_OscConfig+0x5e8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	e015      	b.n	800108c <HAL_RCC_OscConfig+0x614>
 8001060:	40021000 	.word	0x40021000
 8001064:	2302      	movs	r3, #2
 8001066:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001076:	2302      	movs	r3, #2
 8001078:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800107c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001080:	fa93 f3a3 	rbit	r3, r3
 8001084:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001088:	4bc8      	ldr	r3, [pc, #800]	; (80013ac <HAL_RCC_OscConfig+0x934>)
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	2202      	movs	r2, #2
 800108e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001092:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001096:	fa92 f2a2 	rbit	r2, r2
 800109a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800109e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80010a2:	fab2 f282 	clz	r2, r2
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	f042 0220 	orr.w	r2, r2, #32
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	f002 021f 	and.w	r2, r2, #31
 80010b2:	2101      	movs	r1, #1
 80010b4:	fa01 f202 	lsl.w	r2, r1, r2
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1ad      	bne.n	800101a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 8110 	beq.w	80012f4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d079      	beq.n	80011d8 <HAL_RCC_OscConfig+0x760>
 80010e4:	2301      	movs	r3, #1
 80010e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80010f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010fa:	fab3 f383 	clz	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	461a      	mov	r2, r3
 8001102:	4bab      	ldr	r3, [pc, #684]	; (80013b0 <HAL_RCC_OscConfig+0x938>)
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	461a      	mov	r2, r3
 800110a:	2301      	movs	r3, #1
 800110c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110e:	f7ff fa3b 	bl	8000588 <HAL_GetTick>
 8001112:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001116:	e00a      	b.n	800112e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001118:	f7ff fa36 	bl	8000588 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d902      	bls.n	800112e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	f000 bcdb 	b.w	8001ae4 <HAL_RCC_OscConfig+0x106c>
 800112e:	2302      	movs	r3, #2
 8001130:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001134:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001138:	fa93 f3a3 	rbit	r3, r3
 800113c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001144:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001148:	2202      	movs	r2, #2
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001150:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	fa93 f2a3 	rbit	r2, r3
 800115a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800116c:	2202      	movs	r2, #2
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	fa93 f2a3 	rbit	r2, r3
 800117e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001182:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001186:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001188:	4b88      	ldr	r3, [pc, #544]	; (80013ac <HAL_RCC_OscConfig+0x934>)
 800118a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800118c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001190:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001194:	2102      	movs	r1, #2
 8001196:	6019      	str	r1, [r3, #0]
 8001198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800119c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	fa93 f1a3 	rbit	r1, r3
 80011a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011ae:	6019      	str	r1, [r3, #0]
  return result;
 80011b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	fab3 f383 	clz	r3, r3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2101      	movs	r1, #1
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0a0      	beq.n	8001118 <HAL_RCC_OscConfig+0x6a0>
 80011d6:	e08d      	b.n	80012f4 <HAL_RCC_OscConfig+0x87c>
 80011d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	fa93 f2a3 	rbit	r2, r3
 80011f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80011fa:	601a      	str	r2, [r3, #0]
  return result;
 80011fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001200:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001204:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001206:	fab3 f383 	clz	r3, r3
 800120a:	b2db      	uxtb	r3, r3
 800120c:	461a      	mov	r2, r3
 800120e:	4b68      	ldr	r3, [pc, #416]	; (80013b0 <HAL_RCC_OscConfig+0x938>)
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	461a      	mov	r2, r3
 8001216:	2300      	movs	r3, #0
 8001218:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121a:	f7ff f9b5 	bl	8000588 <HAL_GetTick>
 800121e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001222:	e00a      	b.n	800123a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001224:	f7ff f9b0 	bl	8000588 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d902      	bls.n	800123a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	f000 bc55 	b.w	8001ae4 <HAL_RCC_OscConfig+0x106c>
 800123a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800123e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001242:	2202      	movs	r2, #2
 8001244:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800124a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	fa93 f2a3 	rbit	r2, r3
 8001254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001258:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001262:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001266:	2202      	movs	r2, #2
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800126e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	fa93 f2a3 	rbit	r2, r3
 8001278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800127c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800128a:	2202      	movs	r2, #2
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	fa93 f2a3 	rbit	r2, r3
 800129c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80012a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a6:	4b41      	ldr	r3, [pc, #260]	; (80013ac <HAL_RCC_OscConfig+0x934>)
 80012a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80012b2:	2102      	movs	r1, #2
 80012b4:	6019      	str	r1, [r3, #0]
 80012b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	fa93 f1a3 	rbit	r1, r3
 80012c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012c8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80012cc:	6019      	str	r1, [r3, #0]
  return result;
 80012ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012d2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	fab3 f383 	clz	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	f003 031f 	and.w	r3, r3, #31
 80012e8:	2101      	movs	r1, #1
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d197      	bne.n	8001224 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 81a1 	beq.w	800164c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001310:	4b26      	ldr	r3, [pc, #152]	; (80013ac <HAL_RCC_OscConfig+0x934>)
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d116      	bne.n	800134a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800131c:	4b23      	ldr	r3, [pc, #140]	; (80013ac <HAL_RCC_OscConfig+0x934>)
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	4a22      	ldr	r2, [pc, #136]	; (80013ac <HAL_RCC_OscConfig+0x934>)
 8001322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001326:	61d3      	str	r3, [r2, #28]
 8001328:	4b20      	ldr	r3, [pc, #128]	; (80013ac <HAL_RCC_OscConfig+0x934>)
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001334:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800133e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001342:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001344:	2301      	movs	r3, #1
 8001346:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <HAL_RCC_OscConfig+0x93c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001352:	2b00      	cmp	r3, #0
 8001354:	d11a      	bne.n	800138c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_RCC_OscConfig+0x93c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <HAL_RCC_OscConfig+0x93c>)
 800135c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001360:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001362:	f7ff f911 	bl	8000588 <HAL_GetTick>
 8001366:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136a:	e009      	b.n	8001380 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800136c:	f7ff f90c 	bl	8000588 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b64      	cmp	r3, #100	; 0x64
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e3b1      	b.n	8001ae4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_RCC_OscConfig+0x93c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0ef      	beq.n	800136c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800138c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001390:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d10d      	bne.n	80013b8 <HAL_RCC_OscConfig+0x940>
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_RCC_OscConfig+0x934>)
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4a02      	ldr	r2, [pc, #8]	; (80013ac <HAL_RCC_OscConfig+0x934>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6213      	str	r3, [r2, #32]
 80013a8:	e03c      	b.n	8001424 <HAL_RCC_OscConfig+0x9ac>
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000
 80013b0:	10908120 	.word	0x10908120
 80013b4:	40007000 	.word	0x40007000
 80013b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d10c      	bne.n	80013e2 <HAL_RCC_OscConfig+0x96a>
 80013c8:	4bc1      	ldr	r3, [pc, #772]	; (80016d0 <HAL_RCC_OscConfig+0xc58>)
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	4ac0      	ldr	r2, [pc, #768]	; (80016d0 <HAL_RCC_OscConfig+0xc58>)
 80013ce:	f023 0301 	bic.w	r3, r3, #1
 80013d2:	6213      	str	r3, [r2, #32]
 80013d4:	4bbe      	ldr	r3, [pc, #760]	; (80016d0 <HAL_RCC_OscConfig+0xc58>)
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4abd      	ldr	r2, [pc, #756]	; (80016d0 <HAL_RCC_OscConfig+0xc58>)
 80013da:	f023 0304 	bic.w	r3, r3, #4
 80013de:	6213      	str	r3, [r2, #32]
 80013e0:	e020      	b.n	8001424 <HAL_RCC_OscConfig+0x9ac>
 80013e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b05      	cmp	r3, #5
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0x994>
 80013f2:	4bb7      	ldr	r3, [pc, #732]	; (80016d0 <HAL_RCC_OscConfig+0xc58>)
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	4ab6      	ldr	r2, [pc, #728]	; (80016d0 <HAL_RCC_OscConfig+0xc58>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6213      	str	r3, [r2, #32]
 80013fe:	4bb4      	ldr	r3, [pc, #720]	; (80016d0 <HAL_RCC_OscConfig+0xc58>)
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4ab3      	ldr	r2, [pc, #716]	; (80016d0 <HAL_RCC_OscConfig+0xc58>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6213      	str	r3, [r2, #32]
 800140a:	e00b      	b.n	8001424 <HAL_RCC_OscConfig+0x9ac>
 800140c:	4bb0      	ldr	r3, [pc, #704]	; (80016d0 <HAL_RCC_OscConfig+0xc58>)
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4aaf      	ldr	r2, [pc, #700]	; (80016d0 <HAL_RCC_OscConfig+0xc58>)
 8001412:	f023 0301 	bic.w	r3, r3, #1
 8001416:	6213      	str	r3, [r2, #32]
 8001418:	4bad      	ldr	r3, [pc, #692]	; (80016d0 <HAL_RCC_OscConfig+0xc58>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4aac      	ldr	r2, [pc, #688]	; (80016d0 <HAL_RCC_OscConfig+0xc58>)
 800141e:	f023 0304 	bic.w	r3, r3, #4
 8001422:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001428:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 8081 	beq.w	8001538 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001436:	f7ff f8a7 	bl	8000588 <HAL_GetTick>
 800143a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143e:	e00b      	b.n	8001458 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001440:	f7ff f8a2 	bl	8000588 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001450:	4293      	cmp	r3, r2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e345      	b.n	8001ae4 <HAL_RCC_OscConfig+0x106c>
 8001458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001460:	2202      	movs	r2, #2
 8001462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001468:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	fa93 f2a3 	rbit	r2, r3
 8001472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001476:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001480:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001484:	2202      	movs	r2, #2
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	fa93 f2a3 	rbit	r2, r3
 8001496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800149e:	601a      	str	r2, [r3, #0]
  return result;
 80014a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80014a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014aa:	fab3 f383 	clz	r3, r3
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	095b      	lsrs	r3, r3, #5
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d102      	bne.n	80014c4 <HAL_RCC_OscConfig+0xa4c>
 80014be:	4b84      	ldr	r3, [pc, #528]	; (80016d0 <HAL_RCC_OscConfig+0xc58>)
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	e013      	b.n	80014ec <HAL_RCC_OscConfig+0xa74>
 80014c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80014cc:	2202      	movs	r2, #2
 80014ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	fa93 f2a3 	rbit	r2, r3
 80014de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	4b79      	ldr	r3, [pc, #484]	; (80016d0 <HAL_RCC_OscConfig+0xc58>)
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80014f0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80014f4:	2102      	movs	r1, #2
 80014f6:	6011      	str	r1, [r2, #0]
 80014f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80014fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	fa92 f1a2 	rbit	r1, r2
 8001506:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800150a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800150e:	6011      	str	r1, [r2, #0]
  return result;
 8001510:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001514:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001518:	6812      	ldr	r2, [r2, #0]
 800151a:	fab2 f282 	clz	r2, r2
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	f002 021f 	and.w	r2, r2, #31
 800152a:	2101      	movs	r1, #1
 800152c:	fa01 f202 	lsl.w	r2, r1, r2
 8001530:	4013      	ands	r3, r2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d084      	beq.n	8001440 <HAL_RCC_OscConfig+0x9c8>
 8001536:	e07f      	b.n	8001638 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001538:	f7ff f826 	bl	8000588 <HAL_GetTick>
 800153c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001540:	e00b      	b.n	800155a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001542:	f7ff f821 	bl	8000588 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001552:	4293      	cmp	r3, r2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e2c4      	b.n	8001ae4 <HAL_RCC_OscConfig+0x106c>
 800155a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001562:	2202      	movs	r2, #2
 8001564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	fa93 f2a3 	rbit	r2, r3
 8001574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001578:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001582:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001586:	2202      	movs	r2, #2
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	fa93 f2a3 	rbit	r2, r3
 8001598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80015a0:	601a      	str	r2, [r3, #0]
  return result;
 80015a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80015aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ac:	fab3 f383 	clz	r3, r3
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	f043 0302 	orr.w	r3, r3, #2
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d102      	bne.n	80015c6 <HAL_RCC_OscConfig+0xb4e>
 80015c0:	4b43      	ldr	r3, [pc, #268]	; (80016d0 <HAL_RCC_OscConfig+0xc58>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	e013      	b.n	80015ee <HAL_RCC_OscConfig+0xb76>
 80015c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80015ce:	2202      	movs	r2, #2
 80015d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	fa93 f2a3 	rbit	r2, r3
 80015e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <HAL_RCC_OscConfig+0xc58>)
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80015f6:	2102      	movs	r1, #2
 80015f8:	6011      	str	r1, [r2, #0]
 80015fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	fa92 f1a2 	rbit	r1, r2
 8001608:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800160c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001610:	6011      	str	r1, [r2, #0]
  return result;
 8001612:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001616:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	fab2 f282 	clz	r2, r2
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	f002 021f 	and.w	r2, r2, #31
 800162c:	2101      	movs	r1, #1
 800162e:	fa01 f202 	lsl.w	r2, r1, r2
 8001632:	4013      	ands	r3, r2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d184      	bne.n	8001542 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001638:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800163c:	2b01      	cmp	r3, #1
 800163e:	d105      	bne.n	800164c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001640:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <HAL_RCC_OscConfig+0xc58>)
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	4a22      	ldr	r2, [pc, #136]	; (80016d0 <HAL_RCC_OscConfig+0xc58>)
 8001646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800164a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001650:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 8242 	beq.w	8001ae2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800165e:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <HAL_RCC_OscConfig+0xc58>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b08      	cmp	r3, #8
 8001668:	f000 8213 	beq.w	8001a92 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800166c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001670:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	2b02      	cmp	r3, #2
 800167a:	f040 8162 	bne.w	8001942 <HAL_RCC_OscConfig+0xeca>
 800167e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001682:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001686:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800168a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001690:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	fa93 f2a3 	rbit	r2, r3
 800169a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80016a2:	601a      	str	r2, [r3, #0]
  return result;
 80016a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80016ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ae:	fab3 f383 	clz	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	461a      	mov	r2, r3
 80016c0:	2300      	movs	r3, #0
 80016c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7fe ff60 	bl	8000588 <HAL_GetTick>
 80016c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016cc:	e00c      	b.n	80016e8 <HAL_RCC_OscConfig+0xc70>
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d4:	f7fe ff58 	bl	8000588 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e1fd      	b.n	8001ae4 <HAL_RCC_OscConfig+0x106c>
 80016e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80016f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	fa93 f2a3 	rbit	r2, r3
 8001704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001708:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800170c:	601a      	str	r2, [r3, #0]
  return result;
 800170e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001712:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001716:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001718:	fab3 f383 	clz	r3, r3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b01      	cmp	r3, #1
 800172a:	d102      	bne.n	8001732 <HAL_RCC_OscConfig+0xcba>
 800172c:	4bb0      	ldr	r3, [pc, #704]	; (80019f0 <HAL_RCC_OscConfig+0xf78>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	e027      	b.n	8001782 <HAL_RCC_OscConfig+0xd0a>
 8001732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001736:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800173a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800173e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001744:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	fa93 f2a3 	rbit	r2, r3
 800174e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001752:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001760:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	fa93 f2a3 	rbit	r2, r3
 8001774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001778:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	4b9c      	ldr	r3, [pc, #624]	; (80019f0 <HAL_RCC_OscConfig+0xf78>)
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001786:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800178a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800178e:	6011      	str	r1, [r2, #0]
 8001790:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001794:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	fa92 f1a2 	rbit	r1, r2
 800179e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017a2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80017a6:	6011      	str	r1, [r2, #0]
  return result;
 80017a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017ac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	fab2 f282 	clz	r2, r2
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	f042 0220 	orr.w	r2, r2, #32
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	f002 021f 	and.w	r2, r2, #31
 80017c2:	2101      	movs	r1, #1
 80017c4:	fa01 f202 	lsl.w	r2, r1, r2
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d182      	bne.n	80016d4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ce:	4b88      	ldr	r3, [pc, #544]	; (80019f0 <HAL_RCC_OscConfig+0xf78>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80017e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	430b      	orrs	r3, r1
 80017f0:	497f      	ldr	r1, [pc, #508]	; (80019f0 <HAL_RCC_OscConfig+0xf78>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	604b      	str	r3, [r1, #4]
 80017f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80017fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001808:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	fa93 f2a3 	rbit	r2, r3
 8001812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001816:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800181a:	601a      	str	r2, [r3, #0]
  return result;
 800181c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001820:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001824:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001826:	fab3 f383 	clz	r3, r3
 800182a:	b2db      	uxtb	r3, r3
 800182c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001830:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	461a      	mov	r2, r3
 8001838:	2301      	movs	r3, #1
 800183a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7fe fea4 	bl	8000588 <HAL_GetTick>
 8001840:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001844:	e009      	b.n	800185a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001846:	f7fe fe9f 	bl	8000588 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e144      	b.n	8001ae4 <HAL_RCC_OscConfig+0x106c>
 800185a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001866:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	fa93 f2a3 	rbit	r2, r3
 8001876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800187e:	601a      	str	r2, [r3, #0]
  return result;
 8001880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001884:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001888:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	095b      	lsrs	r3, r3, #5
 8001892:	b2db      	uxtb	r3, r3
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d102      	bne.n	80018a4 <HAL_RCC_OscConfig+0xe2c>
 800189e:	4b54      	ldr	r3, [pc, #336]	; (80019f0 <HAL_RCC_OscConfig+0xf78>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	e027      	b.n	80018f4 <HAL_RCC_OscConfig+0xe7c>
 80018a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80018ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	fa93 f2a3 	rbit	r2, r3
 80018c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ce:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80018d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018dc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	fa93 f2a3 	rbit	r2, r3
 80018e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <HAL_RCC_OscConfig+0xf78>)
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018f8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80018fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001900:	6011      	str	r1, [r2, #0]
 8001902:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001906:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	fa92 f1a2 	rbit	r1, r2
 8001910:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001914:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001918:	6011      	str	r1, [r2, #0]
  return result;
 800191a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800191e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	fab2 f282 	clz	r2, r2
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	f042 0220 	orr.w	r2, r2, #32
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	f002 021f 	and.w	r2, r2, #31
 8001934:	2101      	movs	r1, #1
 8001936:	fa01 f202 	lsl.w	r2, r1, r2
 800193a:	4013      	ands	r3, r2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d082      	beq.n	8001846 <HAL_RCC_OscConfig+0xdce>
 8001940:	e0cf      	b.n	8001ae2 <HAL_RCC_OscConfig+0x106a>
 8001942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001946:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800194a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800194e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001954:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	fa93 f2a3 	rbit	r2, r3
 800195e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001962:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001966:	601a      	str	r2, [r3, #0]
  return result;
 8001968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001970:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001972:	fab3 f383 	clz	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800197c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	461a      	mov	r2, r3
 8001984:	2300      	movs	r3, #0
 8001986:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7fe fdfe 	bl	8000588 <HAL_GetTick>
 800198c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001990:	e009      	b.n	80019a6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001992:	f7fe fdf9 	bl	8000588 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e09e      	b.n	8001ae4 <HAL_RCC_OscConfig+0x106c>
 80019a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019aa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80019ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	fa93 f2a3 	rbit	r2, r3
 80019c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80019ca:	601a      	str	r2, [r3, #0]
  return result;
 80019cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80019d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d6:	fab3 f383 	clz	r3, r3
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	095b      	lsrs	r3, r3, #5
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d104      	bne.n	80019f4 <HAL_RCC_OscConfig+0xf7c>
 80019ea:	4b01      	ldr	r3, [pc, #4]	; (80019f0 <HAL_RCC_OscConfig+0xf78>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	e029      	b.n	8001a44 <HAL_RCC_OscConfig+0xfcc>
 80019f0:	40021000 	.word	0x40021000
 80019f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80019fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a06:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	fa93 f2a3 	rbit	r2, r3
 8001a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a14:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	fa93 f2a3 	rbit	r2, r3
 8001a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <HAL_RCC_OscConfig+0x1078>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a48:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001a4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a50:	6011      	str	r1, [r2, #0]
 8001a52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a56:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	fa92 f1a2 	rbit	r1, r2
 8001a60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a64:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001a68:	6011      	str	r1, [r2, #0]
  return result;
 8001a6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a6e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	fab2 f282 	clz	r2, r2
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	f042 0220 	orr.w	r2, r2, #32
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	f002 021f 	and.w	r2, r2, #31
 8001a84:	2101      	movs	r1, #1
 8001a86:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d180      	bne.n	8001992 <HAL_RCC_OscConfig+0xf1a>
 8001a90:	e027      	b.n	8001ae2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e01e      	b.n	8001ae4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_RCC_OscConfig+0x1078>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001aae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ab2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d10b      	bne.n	8001ade <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001ac6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001aca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d001      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b09e      	sub	sp, #120	; 0x78
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e162      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b0c:	4b90      	ldr	r3, [pc, #576]	; (8001d50 <HAL_RCC_ClockConfig+0x25c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d910      	bls.n	8001b3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1a:	4b8d      	ldr	r3, [pc, #564]	; (8001d50 <HAL_RCC_ClockConfig+0x25c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 0207 	bic.w	r2, r3, #7
 8001b22:	498b      	ldr	r1, [pc, #556]	; (8001d50 <HAL_RCC_ClockConfig+0x25c>)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2a:	4b89      	ldr	r3, [pc, #548]	; (8001d50 <HAL_RCC_ClockConfig+0x25c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e14a      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d008      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b48:	4b82      	ldr	r3, [pc, #520]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	497f      	ldr	r1, [pc, #508]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 80dc 	beq.w	8001d20 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d13c      	bne.n	8001bea <HAL_RCC_ClockConfig+0xf6>
 8001b70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b74:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b78:	fa93 f3a3 	rbit	r3, r3
 8001b7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b80:	fab3 f383 	clz	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d102      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xa6>
 8001b94:	4b6f      	ldr	r3, [pc, #444]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	e00f      	b.n	8001bba <HAL_RCC_ClockConfig+0xc6>
 8001b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	667b      	str	r3, [r7, #100]	; 0x64
 8001ba8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bac:	663b      	str	r3, [r7, #96]	; 0x60
 8001bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bb0:	fa93 f3a3 	rbit	r3, r3
 8001bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bb6:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bbe:	65ba      	str	r2, [r7, #88]	; 0x58
 8001bc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001bc2:	fa92 f2a2 	rbit	r2, r2
 8001bc6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001bc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bca:	fab2 f282 	clz	r2, r2
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	f042 0220 	orr.w	r2, r2, #32
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	f002 021f 	and.w	r2, r2, #31
 8001bda:	2101      	movs	r1, #1
 8001bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d17b      	bne.n	8001cde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e0f3      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d13c      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x178>
 8001bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bf6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	095b      	lsrs	r3, r3, #5
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d102      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x128>
 8001c16:	4b4f      	ldr	r3, [pc, #316]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	e00f      	b.n	8001c3c <HAL_RCC_ClockConfig+0x148>
 8001c1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c24:	fa93 f3a3 	rbit	r3, r3
 8001c28:	647b      	str	r3, [r7, #68]	; 0x44
 8001c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c2e:	643b      	str	r3, [r7, #64]	; 0x40
 8001c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c32:	fa93 f3a3 	rbit	r3, r3
 8001c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c38:	4b46      	ldr	r3, [pc, #280]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c40:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c44:	fa92 f2a2 	rbit	r2, r2
 8001c48:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c4c:	fab2 f282 	clz	r2, r2
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	f042 0220 	orr.w	r2, r2, #32
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	f002 021f 	and.w	r2, r2, #31
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d13a      	bne.n	8001cde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0b2      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x2de>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	095b      	lsrs	r3, r3, #5
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d102      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x1a0>
 8001c8e:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	e00d      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1bc>
 8001c94:	2302      	movs	r3, #2
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	623b      	str	r3, [r7, #32]
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	fa93 f3a3 	rbit	r3, r3
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	61ba      	str	r2, [r7, #24]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	fa92 f2a2 	rbit	r2, r2
 8001cba:	617a      	str	r2, [r7, #20]
  return result;
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	fab2 f282 	clz	r2, r2
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	f042 0220 	orr.w	r2, r2, #32
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f002 021f 	and.w	r2, r2, #31
 8001cce:	2101      	movs	r1, #1
 8001cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e079      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f023 0203 	bic.w	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	491a      	ldr	r1, [pc, #104]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf0:	f7fe fc4a 	bl	8000588 <HAL_GetTick>
 8001cf4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7fe fc46 	bl	8000588 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e061      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_RCC_ClockConfig+0x260>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 020c 	and.w	r2, r3, #12
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d1eb      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_RCC_ClockConfig+0x25c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d214      	bcs.n	8001d58 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <HAL_RCC_ClockConfig+0x25c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 0207 	bic.w	r2, r3, #7
 8001d36:	4906      	ldr	r1, [pc, #24]	; (8001d50 <HAL_RCC_ClockConfig+0x25c>)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <HAL_RCC_ClockConfig+0x25c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e040      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x2de>
 8001d50:	40022000 	.word	0x40022000
 8001d54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d64:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_RCC_ClockConfig+0x2e8>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	491a      	ldr	r1, [pc, #104]	; (8001ddc <HAL_RCC_ClockConfig+0x2e8>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <HAL_RCC_ClockConfig+0x2e8>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4912      	ldr	r1, [pc, #72]	; (8001ddc <HAL_RCC_ClockConfig+0x2e8>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d96:	f000 f829 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001d9a:	4601      	mov	r1, r0
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <HAL_RCC_ClockConfig+0x2e8>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001da4:	22f0      	movs	r2, #240	; 0xf0
 8001da6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	fa92 f2a2 	rbit	r2, r2
 8001dae:	60fa      	str	r2, [r7, #12]
  return result;
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	fab2 f282 	clz	r2, r2
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	40d3      	lsrs	r3, r2
 8001dba:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <HAL_RCC_ClockConfig+0x2ec>)
 8001dbc:	5cd3      	ldrb	r3, [r2, r3]
 8001dbe:	fa21 f303 	lsr.w	r3, r1, r3
 8001dc2:	4a08      	ldr	r2, [pc, #32]	; (8001de4 <HAL_RCC_ClockConfig+0x2f0>)
 8001dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001dc6:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <HAL_RCC_ClockConfig+0x2f4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fafe 	bl	80003cc <HAL_InitTick>
  
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3778      	adds	r7, #120	; 0x78
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	080028dc 	.word	0x080028dc
 8001de4:	20000000 	.word	0x20000000
 8001de8:	20000004 	.word	0x20000004

08001dec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b08b      	sub	sp, #44	; 0x2c
 8001df0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e06:	4b29      	ldr	r3, [pc, #164]	; (8001eac <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d002      	beq.n	8001e1c <HAL_RCC_GetSysClockFreq+0x30>
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d003      	beq.n	8001e22 <HAL_RCC_GetSysClockFreq+0x36>
 8001e1a:	e03c      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e1c:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e1e:	623b      	str	r3, [r7, #32]
      break;
 8001e20:	e03c      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e28:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e2c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	fa92 f2a2 	rbit	r2, r2
 8001e34:	607a      	str	r2, [r7, #4]
  return result;
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	fab2 f282 	clz	r2, r2
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	40d3      	lsrs	r3, r2
 8001e40:	4a1c      	ldr	r2, [pc, #112]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e42:	5cd3      	ldrb	r3, [r2, r3]
 8001e44:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001e46:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	220f      	movs	r2, #15
 8001e50:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	fa92 f2a2 	rbit	r2, r2
 8001e58:	60fa      	str	r2, [r7, #12]
  return result;
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	fab2 f282 	clz	r2, r2
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	40d3      	lsrs	r3, r2
 8001e64:	4a14      	ldr	r2, [pc, #80]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e66:	5cd3      	ldrb	r3, [r2, r3]
 8001e68:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e74:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
 8001e84:	e004      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	4a0c      	ldr	r2, [pc, #48]	; (8001ebc <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e8a:	fb02 f303 	mul.w	r3, r2, r3
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	623b      	str	r3, [r7, #32]
      break;
 8001e94:	e002      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e98:	623b      	str	r3, [r7, #32]
      break;
 8001e9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	372c      	adds	r7, #44	; 0x2c
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	007a1200 	.word	0x007a1200
 8001eb4:	080028f4 	.word	0x080028f4
 8001eb8:	08002904 	.word	0x08002904
 8001ebc:	003d0900 	.word	0x003d0900

08001ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000000 	.word	0x20000000

08001ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001ede:	f7ff ffef 	bl	8001ec0 <HAL_RCC_GetHCLKFreq>
 8001ee2:	4601      	mov	r1, r0
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001eec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ef0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	fa92 f2a2 	rbit	r2, r2
 8001ef8:	603a      	str	r2, [r7, #0]
  return result;
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	fab2 f282 	clz	r2, r2
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	40d3      	lsrs	r3, r2
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001f06:	5cd3      	ldrb	r3, [r2, r3]
 8001f08:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	080028ec 	.word	0x080028ec

08001f1c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	220f      	movs	r2, #15
 8001f2a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_RCC_GetClockConfig+0x5c>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0203 	and.w	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <HAL_RCC_GetClockConfig+0x5c>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <HAL_RCC_GetClockConfig+0x5c>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <HAL_RCC_GetClockConfig+0x5c>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	08db      	lsrs	r3, r3, #3
 8001f56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001f5e:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <HAL_RCC_GetClockConfig+0x60>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0207 	and.w	r2, r3, #7
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	601a      	str	r2, [r3, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40022000 	.word	0x40022000

08001f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e049      	b.n	8002026 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f841 	bl	800202e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	f000 f9e4 	bl	800238c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b01      	cmp	r3, #1
 8002056:	d001      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e040      	b.n	80020de <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0201 	orr.w	r2, r2, #1
 8002072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1c      	ldr	r2, [pc, #112]	; (80020ec <HAL_TIM_Base_Start_IT+0xa8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00e      	beq.n	800209c <HAL_TIM_Base_Start_IT+0x58>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002086:	d009      	beq.n	800209c <HAL_TIM_Base_Start_IT+0x58>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <HAL_TIM_Base_Start_IT+0xac>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d004      	beq.n	800209c <HAL_TIM_Base_Start_IT+0x58>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d115      	bne.n	80020c8 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <HAL_TIM_Base_Start_IT+0xb4>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d015      	beq.n	80020da <HAL_TIM_Base_Start_IT+0x96>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b4:	d011      	beq.n	80020da <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0201 	orr.w	r2, r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c6:	e008      	b.n	80020da <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	e000      	b.n	80020dc <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40012c00 	.word	0x40012c00
 80020f0:	40000400 	.word	0x40000400
 80020f4:	40014000 	.word	0x40014000
 80020f8:	00010007 	.word	0x00010007

080020fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b02      	cmp	r3, #2
 8002110:	d122      	bne.n	8002158 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b02      	cmp	r3, #2
 800211e:	d11b      	bne.n	8002158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0202 	mvn.w	r2, #2
 8002128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f905 	bl	800234e <HAL_TIM_IC_CaptureCallback>
 8002144:	e005      	b.n	8002152 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f8f7 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f908 	bl	8002362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b04      	cmp	r3, #4
 8002164:	d122      	bne.n	80021ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b04      	cmp	r3, #4
 8002172:	d11b      	bne.n	80021ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0204 	mvn.w	r2, #4
 800217c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2202      	movs	r2, #2
 8002182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f8db 	bl	800234e <HAL_TIM_IC_CaptureCallback>
 8002198:	e005      	b.n	80021a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f8cd 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f8de 	bl	8002362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d122      	bne.n	8002200 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d11b      	bne.n	8002200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0208 	mvn.w	r2, #8
 80021d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2204      	movs	r2, #4
 80021d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f8b1 	bl	800234e <HAL_TIM_IC_CaptureCallback>
 80021ec:	e005      	b.n	80021fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f8a3 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f8b4 	bl	8002362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	2b10      	cmp	r3, #16
 800220c:	d122      	bne.n	8002254 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	2b10      	cmp	r3, #16
 800221a:	d11b      	bne.n	8002254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0210 	mvn.w	r2, #16
 8002224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2208      	movs	r2, #8
 800222a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f887 	bl	800234e <HAL_TIM_IC_CaptureCallback>
 8002240:	e005      	b.n	800224e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f879 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f88a 	bl	8002362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d10e      	bne.n	8002280 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	d107      	bne.n	8002280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0201 	mvn.w	r2, #1
 8002278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe f86a 	bl	8000354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228a:	2b80      	cmp	r3, #128	; 0x80
 800228c:	d10e      	bne.n	80022ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002298:	2b80      	cmp	r3, #128	; 0x80
 800229a:	d107      	bne.n	80022ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f8f2 	bl	8002490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ba:	d10e      	bne.n	80022da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c6:	2b80      	cmp	r3, #128	; 0x80
 80022c8:	d107      	bne.n	80022da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80022d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f8e5 	bl	80024a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e4:	2b40      	cmp	r3, #64	; 0x40
 80022e6:	d10e      	bne.n	8002306 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f2:	2b40      	cmp	r3, #64	; 0x40
 80022f4:	d107      	bne.n	8002306 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f838 	bl	8002376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	2b20      	cmp	r3, #32
 8002312:	d10e      	bne.n	8002332 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	2b20      	cmp	r3, #32
 8002320:	d107      	bne.n	8002332 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f06f 0220 	mvn.w	r2, #32
 800232a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f8a5 	bl	800247c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a32      	ldr	r2, [pc, #200]	; (8002468 <TIM_Base_SetConfig+0xdc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d007      	beq.n	80023b4 <TIM_Base_SetConfig+0x28>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023aa:	d003      	beq.n	80023b4 <TIM_Base_SetConfig+0x28>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a2f      	ldr	r2, [pc, #188]	; (800246c <TIM_Base_SetConfig+0xe0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d108      	bne.n	80023c6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a27      	ldr	r2, [pc, #156]	; (8002468 <TIM_Base_SetConfig+0xdc>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <TIM_Base_SetConfig+0x6a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d4:	d00f      	beq.n	80023f6 <TIM_Base_SetConfig+0x6a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a24      	ldr	r2, [pc, #144]	; (800246c <TIM_Base_SetConfig+0xe0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00b      	beq.n	80023f6 <TIM_Base_SetConfig+0x6a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a23      	ldr	r2, [pc, #140]	; (8002470 <TIM_Base_SetConfig+0xe4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d007      	beq.n	80023f6 <TIM_Base_SetConfig+0x6a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a22      	ldr	r2, [pc, #136]	; (8002474 <TIM_Base_SetConfig+0xe8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d003      	beq.n	80023f6 <TIM_Base_SetConfig+0x6a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a21      	ldr	r2, [pc, #132]	; (8002478 <TIM_Base_SetConfig+0xec>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d108      	bne.n	8002408 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <TIM_Base_SetConfig+0xdc>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d00b      	beq.n	800244c <TIM_Base_SetConfig+0xc0>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a0e      	ldr	r2, [pc, #56]	; (8002470 <TIM_Base_SetConfig+0xe4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d007      	beq.n	800244c <TIM_Base_SetConfig+0xc0>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a0d      	ldr	r2, [pc, #52]	; (8002474 <TIM_Base_SetConfig+0xe8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d003      	beq.n	800244c <TIM_Base_SetConfig+0xc0>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a0c      	ldr	r2, [pc, #48]	; (8002478 <TIM_Base_SetConfig+0xec>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d103      	bne.n	8002454 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	615a      	str	r2, [r3, #20]
}
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40012c00 	.word	0x40012c00
 800246c:	40000400 	.word	0x40000400
 8002470:	40014000 	.word	0x40014000
 8002474:	40014400 	.word	0x40014400
 8002478:	40014800 	.word	0x40014800

0800247c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	; 0x28
 80024bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80024be:	2300      	movs	r3, #0
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024c2:	4b6e      	ldr	r3, [pc, #440]	; (800267c <xTaskIncrementTick+0x1c4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 80cd 	bne.w	8002666 <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80024cc:	4b6c      	ldr	r3, [pc, #432]	; (8002680 <xTaskIncrementTick+0x1c8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80024d4:	4a6a      	ldr	r2, [pc, #424]	; (8002680 <xTaskIncrementTick+0x1c8>)
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d120      	bne.n	8002522 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80024e0:	4b68      	ldr	r3, [pc, #416]	; (8002684 <xTaskIncrementTick+0x1cc>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80024ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80024fc:	bf00      	nop
 80024fe:	e7fe      	b.n	80024fe <xTaskIncrementTick+0x46>
 8002500:	4b60      	ldr	r3, [pc, #384]	; (8002684 <xTaskIncrementTick+0x1cc>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	4b60      	ldr	r3, [pc, #384]	; (8002688 <xTaskIncrementTick+0x1d0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a5e      	ldr	r2, [pc, #376]	; (8002684 <xTaskIncrementTick+0x1cc>)
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4a5e      	ldr	r2, [pc, #376]	; (8002688 <xTaskIncrementTick+0x1d0>)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b5d      	ldr	r3, [pc, #372]	; (800268c <xTaskIncrementTick+0x1d4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	3301      	adds	r3, #1
 800251a:	4a5c      	ldr	r2, [pc, #368]	; (800268c <xTaskIncrementTick+0x1d4>)
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	f000 f91b 	bl	8002758 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002522:	4b5b      	ldr	r3, [pc, #364]	; (8002690 <xTaskIncrementTick+0x1d8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6a3a      	ldr	r2, [r7, #32]
 8002528:	429a      	cmp	r2, r3
 800252a:	f0c0 80a1 	bcc.w	8002670 <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800252e:	4b55      	ldr	r3, [pc, #340]	; (8002684 <xTaskIncrementTick+0x1cc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d104      	bne.n	8002542 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002538:	4b55      	ldr	r3, [pc, #340]	; (8002690 <xTaskIncrementTick+0x1d8>)
 800253a:	f04f 32ff 	mov.w	r2, #4294967295
 800253e:	601a      	str	r2, [r3, #0]
                    break;
 8002540:	e096      	b.n	8002670 <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002542:	4b50      	ldr	r3, [pc, #320]	; (8002684 <xTaskIncrementTick+0x1cc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002552:	6a3a      	ldr	r2, [r7, #32]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	429a      	cmp	r2, r3
 8002558:	d203      	bcs.n	8002562 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800255a:	4a4d      	ldr	r2, [pc, #308]	; (8002690 <xTaskIncrementTick+0x1d8>)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002560:	e086      	b.n	8002670 <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	68d2      	ldr	r2, [r2, #12]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	6892      	ldr	r2, [r2, #8]
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	3304      	adds	r3, #4
 8002584:	429a      	cmp	r2, r3
 8002586:	d103      	bne.n	8002590 <xTaskIncrementTick+0xd8>
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2200      	movs	r2, #0
 8002594:	615a      	str	r2, [r3, #20]
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	1e5a      	subs	r2, r3, #1
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01e      	beq.n	80025e6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	6a12      	ldr	r2, [r2, #32]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	69d2      	ldr	r2, [r2, #28]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	3318      	adds	r3, #24
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d103      	bne.n	80025d6 <xTaskIncrementTick+0x11e>
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	6a1a      	ldr	r2, [r3, #32]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2200      	movs	r2, #0
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	1e5a      	subs	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	2201      	movs	r2, #1
 80025ec:	409a      	lsls	r2, r3
 80025ee:	4b29      	ldr	r3, [pc, #164]	; (8002694 <xTaskIncrementTick+0x1dc>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	4a27      	ldr	r2, [pc, #156]	; (8002694 <xTaskIncrementTick+0x1dc>)
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025fc:	4926      	ldr	r1, [pc, #152]	; (8002698 <xTaskIncrementTick+0x1e0>)
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	3304      	adds	r3, #4
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	60da      	str	r2, [r3, #12]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	3204      	adds	r2, #4
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	1d1a      	adds	r2, r3, #4
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4a17      	ldr	r2, [pc, #92]	; (8002698 <xTaskIncrementTick+0x1e0>)
 800263c:	441a      	add	r2, r3
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	615a      	str	r2, [r3, #20]
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002646:	4914      	ldr	r1, [pc, #80]	; (8002698 <xTaskIncrementTick+0x1e0>)
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	1c59      	adds	r1, r3, #1
 8002656:	4810      	ldr	r0, [pc, #64]	; (8002698 <xTaskIncrementTick+0x1e0>)
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4403      	add	r3, r0
 8002662:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002664:	e763      	b.n	800252e <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <xTaskIncrementTick+0x1e4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	4a0b      	ldr	r2, [pc, #44]	; (800269c <xTaskIncrementTick+0x1e4>)
 800266e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002672:	4618      	mov	r0, r3
 8002674:	3728      	adds	r7, #40	; 0x28
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000100 	.word	0x20000100
 8002680:	200000e8 	.word	0x200000e8
 8002684:	200000e0 	.word	0x200000e0
 8002688:	200000e4 	.word	0x200000e4
 800268c:	200000f8 	.word	0x200000f8
 8002690:	200000fc 	.word	0x200000fc
 8002694:	200000ec 	.word	0x200000ec
 8002698:	2000007c 	.word	0x2000007c
 800269c:	200000f0 	.word	0x200000f0

080026a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80026a6:	4b27      	ldr	r3, [pc, #156]	; (8002744 <vTaskSwitchContext+0xa4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80026ae:	4b26      	ldr	r3, [pc, #152]	; (8002748 <vTaskSwitchContext+0xa8>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80026b4:	e03f      	b.n	8002736 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80026b6:	4b24      	ldr	r3, [pc, #144]	; (8002748 <vTaskSwitchContext+0xa8>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026bc:	4b23      	ldr	r3, [pc, #140]	; (800274c <vTaskSwitchContext+0xac>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	fab3 f383 	clz	r3, r3
 80026c8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80026ca:	7afb      	ldrb	r3, [r7, #11]
 80026cc:	f1c3 031f 	rsb	r3, r3, #31
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	491f      	ldr	r1, [pc, #124]	; (8002750 <vTaskSwitchContext+0xb0>)
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10a      	bne.n	80026fc <vTaskSwitchContext+0x5c>
        __asm volatile
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	607b      	str	r3, [r7, #4]
    }
 80026f8:	bf00      	nop
 80026fa:	e7fe      	b.n	80026fa <vTaskSwitchContext+0x5a>
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4a12      	ldr	r2, [pc, #72]	; (8002750 <vTaskSwitchContext+0xb0>)
 8002708:	4413      	add	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	3308      	adds	r3, #8
 800271e:	429a      	cmp	r2, r3
 8002720:	d104      	bne.n	800272c <vTaskSwitchContext+0x8c>
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	4a08      	ldr	r2, [pc, #32]	; (8002754 <vTaskSwitchContext+0xb4>)
 8002734:	6013      	str	r3, [r2, #0]
}
 8002736:	bf00      	nop
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000100 	.word	0x20000100
 8002748:	200000f4 	.word	0x200000f4
 800274c:	200000ec 	.word	0x200000ec
 8002750:	2000007c 	.word	0x2000007c
 8002754:	20000078 	.word	0x20000078

08002758 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800275c:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <prvResetNextTaskUnblockTime+0x30>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d104      	bne.n	8002770 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <prvResetNextTaskUnblockTime+0x34>)
 8002768:	f04f 32ff 	mov.w	r2, #4294967295
 800276c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800276e:	e005      	b.n	800277c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <prvResetNextTaskUnblockTime+0x30>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a04      	ldr	r2, [pc, #16]	; (800278c <prvResetNextTaskUnblockTime+0x34>)
 800277a:	6013      	str	r3, [r2, #0]
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	200000e0 	.word	0x200000e0
 800278c:	200000fc 	.word	0x200000fc

08002790 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002790:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <pxCurrentTCBConst2>)
 8002792:	6819      	ldr	r1, [r3, #0]
 8002794:	6808      	ldr	r0, [r1, #0]
 8002796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800279a:	f380 8809 	msr	PSP, r0
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f04f 0000 	mov.w	r0, #0
 80027a6:	f380 8811 	msr	BASEPRI, r0
 80027aa:	4770      	bx	lr
 80027ac:	f3af 8000 	nop.w

080027b0 <pxCurrentTCBConst2>:
 80027b0:	20000078 	.word	0x20000078
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
	...

080027c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80027c0:	f3ef 8009 	mrs	r0, PSP
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	4b15      	ldr	r3, [pc, #84]	; (8002820 <pxCurrentTCBConst>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	f01e 0f10 	tst.w	lr, #16
 80027d0:	bf08      	it	eq
 80027d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80027d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027da:	6010      	str	r0, [r2, #0]
 80027dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80027e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80027e4:	f380 8811 	msr	BASEPRI, r0
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f7ff ff56 	bl	80026a0 <vTaskSwitchContext>
 80027f4:	f04f 0000 	mov.w	r0, #0
 80027f8:	f380 8811 	msr	BASEPRI, r0
 80027fc:	bc09      	pop	{r0, r3}
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	6808      	ldr	r0, [r1, #0]
 8002802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002806:	f01e 0f10 	tst.w	lr, #16
 800280a:	bf08      	it	eq
 800280c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002810:	f380 8809 	msr	PSP, r0
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	f3af 8000 	nop.w

08002820 <pxCurrentTCBConst>:
 8002820:	20000078 	.word	0x20000078
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop

08002828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
        __asm volatile
 800282e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002832:	f383 8811 	msr	BASEPRI, r3
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	607b      	str	r3, [r7, #4]
    }
 8002840:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002842:	f7ff fe39 	bl	80024b8 <xTaskIncrementTick>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <SysTick_Handler+0x40>)
 800284e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	2300      	movs	r3, #0
 8002856:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800285e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	e000ed04 	.word	0xe000ed04

0800286c <__libc_init_array>:
 800286c:	b570      	push	{r4, r5, r6, lr}
 800286e:	4d0d      	ldr	r5, [pc, #52]	; (80028a4 <__libc_init_array+0x38>)
 8002870:	4c0d      	ldr	r4, [pc, #52]	; (80028a8 <__libc_init_array+0x3c>)
 8002872:	1b64      	subs	r4, r4, r5
 8002874:	10a4      	asrs	r4, r4, #2
 8002876:	2600      	movs	r6, #0
 8002878:	42a6      	cmp	r6, r4
 800287a:	d109      	bne.n	8002890 <__libc_init_array+0x24>
 800287c:	4d0b      	ldr	r5, [pc, #44]	; (80028ac <__libc_init_array+0x40>)
 800287e:	4c0c      	ldr	r4, [pc, #48]	; (80028b0 <__libc_init_array+0x44>)
 8002880:	f000 f820 	bl	80028c4 <_init>
 8002884:	1b64      	subs	r4, r4, r5
 8002886:	10a4      	asrs	r4, r4, #2
 8002888:	2600      	movs	r6, #0
 800288a:	42a6      	cmp	r6, r4
 800288c:	d105      	bne.n	800289a <__libc_init_array+0x2e>
 800288e:	bd70      	pop	{r4, r5, r6, pc}
 8002890:	f855 3b04 	ldr.w	r3, [r5], #4
 8002894:	4798      	blx	r3
 8002896:	3601      	adds	r6, #1
 8002898:	e7ee      	b.n	8002878 <__libc_init_array+0xc>
 800289a:	f855 3b04 	ldr.w	r3, [r5], #4
 800289e:	4798      	blx	r3
 80028a0:	3601      	adds	r6, #1
 80028a2:	e7f2      	b.n	800288a <__libc_init_array+0x1e>
 80028a4:	08002914 	.word	0x08002914
 80028a8:	08002914 	.word	0x08002914
 80028ac:	08002914 	.word	0x08002914
 80028b0:	08002918 	.word	0x08002918

080028b4 <memset>:
 80028b4:	4402      	add	r2, r0
 80028b6:	4603      	mov	r3, r0
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d100      	bne.n	80028be <memset+0xa>
 80028bc:	4770      	bx	lr
 80028be:	f803 1b01 	strb.w	r1, [r3], #1
 80028c2:	e7f9      	b.n	80028b8 <memset+0x4>

080028c4 <_init>:
 80028c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c6:	bf00      	nop
 80028c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ca:	bc08      	pop	{r3}
 80028cc:	469e      	mov	lr, r3
 80028ce:	4770      	bx	lr

080028d0 <_fini>:
 80028d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d2:	bf00      	nop
 80028d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d6:	bc08      	pop	{r3}
 80028d8:	469e      	mov	lr, r3
 80028da:	4770      	bx	lr
